resource "aws_eks_cluster" "eks_cluster" { name = var.eks_cluster_name version = var.eks_cluster_version role_arn = aws_iam_role.eks_cluster_role.arn enabled_cluster_log_types = [ "api", "audit", "authenticator", "controllerManager", "scheduler" ] encryption_config { provider = "aws" resources = [ "secrets", "etcd" ] } endpoint_public_access = false vpc_config { subnet_ids = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id] security_group_ids = [aws_security_group.eks_cluster_sg.id] } tags = { Name = "EKS-Cluster-${var.environment}" } } resource "aws_eks_node_group" "node_group" { cluster_name = aws_eks_cluster.eks_cluster.name nodegroup_name = var.node_group_name subnet_ids = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id] instance_types = [var.node_group_instance_type] scaling_config { desired_size = 2 min_size = var.node_group_min_size max_size = var.node_group_max_size } release_version = var.eks_cluster_version disk_size = 100 volume_type = "gp2" node_role_arn = aws_iam_role.node_role.arn labels = { "eks.amazonaws.com/nodegroup" = var.node_group_name } tags = { Name = "EKS-Node-Group-${var.environment}" } } resource "aws_eks_cluster_autoscaler" "cluster_autoscaler" { cluster_name = aws_eks_cluster.eks_cluster.name enabled = true expand_replicas = true scan_interval = 10 min_replicas = var.cluster_autoscaler_min_size max_replicas = var.cluster_autoscaler_max_size }