terraform { required_providers { aws = { source  = "hashicorp/aws" version = "~> 4.0" } } } provider "aws" { region = var.aws_region } # Configure the VPC and Subnets resource "aws_vpc" "main" { cidr_block = var.vpc_cidr_block enable_dns_hostnames = true enable_dns_support = true tags = { Name = "EKS-Cluster-VPC" } } resource "aws_subnet" "public_subnet_1" { vpc_id = aws_vpc.main.id cidr_block = var.public_subnet_1_cidr_block availability_zone = var.az_1 tags = { Name = "EKS-Cluster-Public-Subnet-1" } } resource "aws_subnet" "public_subnet_2" { vpc_id = aws_vpc.main.id cidr_block = var.public_subnet_2_cidr_block availability_zone = var.az_2 tags = { Name = "EKS-Cluster-Public-Subnet-2" } } resource "aws_subnet" "private_subnet_1" { vpc_id = aws_vpc.main.id cidr_block = var.private_subnet_1_cidr_block availability_zone = var.az_1 tags = { Name = "EKS-Cluster-Private-Subnet-1" } } resource "aws_subnet" "private_subnet_2" { vpc_id = aws_vpc.main.id cidr_block = var.private_subnet_2_cidr_block availability_zone = var.az_2 tags = { Name = "EKS-Cluster-Private-Subnet-2" } } # Configure the NAT Gateway resource "aws_nat_gateway" "nat_gateway" { allocation_id = aws_eip.nat_gateway_eip.id subnet_id = aws_subnet.public_subnet_1.id tags = { Name = "EKS-Cluster-NAT-Gateway" } } resource "aws_eip" "nat_gateway_eip" { vpc = true } # Configure the Security Groups resource "aws_security_group" "eks_cluster_sg" { name = "EKS-Cluster-Security-Group" description = "Security group for the EKS cluster" vpc_id = aws_vpc.main.id ingress { from_port = 22 to_port = 22 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] } ingress { from_port = 443 to_port = 443 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] } ingress { from_port = 6443 to_port = 6443 protocol = "tcp" cidr_blocks = ["0.0.0.0/0"] } egress { from_port = 0 to_port = 0 protocol = "-1" cidr_blocks = ["0.0.0.0/0"] } } # Configure the Network ACL resource "aws_network_acl" "eks_cluster_acl" { vpc_id = aws_vpc.main.id ingress { protocol = "tcp" rule_no = 100 action = "allow" cidr_blocks = ["0.0.0.0/0"] from_port = 80 to_port = 80 } ingress { protocol = "tcp" rule_no = 101 action = "allow" cidr_blocks = ["0.0.0.0/0"] from_port = 443 to_port = 443 } ingress { protocol = "tcp" rule_no = 102 action = "allow" cidr_blocks = ["0.0.0.0/0"] from_port = 22 to_port = 22 } egress { protocol = "tcp" rule_no = 100 action = "allow" cidr_blocks = ["0.0.0.0/0"] from_port = 0 to_port = 0 } } resource "aws_network_acl_association" "public_subnet_1" { network_acl_id = aws_network_acl.eks_cluster_acl.id subnet_id = aws_subnet.public_subnet_1.id } resource "aws_network_acl_association" "public_subnet_2" { network_acl_id = aws_network_acl.eks_cluster_acl.id subnet_id = aws_subnet.public_subnet_2.id } resource "aws_network_acl_association" "private_subnet_1" { network_acl_id = aws_network_acl.eks_cluster_acl.id subnet_id = aws_subnet.private_subnet_1.id } resource "aws_network_acl_association" "private_subnet_2" { network_acl_id = aws_network_acl.eks_cluster_acl.id subnet_id = aws_subnet.private_subnet_2.id }